### Starting build.
# Target: Main/Main.ml.depends, tags: { explain, extension:ml, file:Main/Main.ml, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Main/Main.ml > Main/Main.ml.depends # cached
# Target: Main/Compile.ml.depends, tags: { explain, extension:ml, file:Main/Compile.ml, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Main/Compile.ml > Main/Compile.ml.depends # cached
# Target: Parsing/AST.ml.depends, tags: { explain, extension:ml, file:Parsing/AST.ml, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Parsing/AST.ml > Parsing/AST.ml.depends # cached
# Target: Utils/ListII.mli.depends, tags: { explain, extension:mli, file:Utils/ListII.mli, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Utils/ListII.mli > Utils/ListII.mli.depends # cached
# Target: Utils/ListII.cmi, tags: { byte, compile, explain, extension:mli, file:Utils/ListII.mli, interf, ocaml, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -package ANSITerminal -I Utils -I Typing -I Parsing -I Compiling -I Main -o Utils/ListII.cmi Utils/ListII.mli # cached
# Target: Utils/Location.mli.depends, tags: { explain, extension:mli, file:Utils/Location.mli, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Utils/Location.mli > Utils/Location.mli.depends # cached
# Target: Utils/Location.cmi, tags: { byte, compile, explain, extension:mli, file:Utils/Location.mli, interf, ocaml, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -package ANSITerminal -I Utils -I Typing -I Parsing -I Compiling -I Main -o Utils/Location.cmi Utils/Location.mli # cached
# Target: Typing/Type.mli.depends, tags: { explain, extension:mli, file:Typing/Type.mli, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Typing/Type.mli > Typing/Type.mli.depends # cached
# Target: Typing/Type.cmi, tags: { byte, compile, explain, extension:mli, file:Typing/Type.mli, interf, ocaml, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -package ANSITerminal -I Typing -I Parsing -I Compiling -I Main -I Utils -o Typing/Type.cmi Typing/Type.mli # cached
# Target: Parsing/AST.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Parsing/AST.cmo, file:Parsing/AST.ml, implem, ocaml, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -package ANSITerminal -I Parsing -I Typing -I Compiling -I Main -I Utils -o Parsing/AST.cmo Parsing/AST.ml # cached
# Target: Compiling/environement.ml.depends, tags: { explain, extension:ml, file:Compiling/environement.ml, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Compiling/environement.ml > Compiling/environement.ml.depends # cached
# Target: Compiling/exceptions.ml.depends, tags: { explain, extension:ml, file:Compiling/exceptions.ml, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Compiling/exceptions.ml > Compiling/exceptions.ml.depends # cached
# Target: Compiling/exceptions.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Compiling/exceptions.cmo, file:Compiling/exceptions.ml, implem, ocaml, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -package ANSITerminal -I Compiling -I Typing -I Parsing -I Main -I Utils -o Compiling/exceptions.cmo Compiling/exceptions.ml # cached
# Target: Compiling/execute.ml.depends, tags: { explain, extension:ml, file:Compiling/execute.ml, ocaml, ocamldep, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -package ANSITerminal -modules Compiling/execute.ml > Compiling/execute.ml.depends # cached
# Target: Compiling/environement.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Compiling/environement.cmo, file:Compiling/environement.ml, implem, ocaml, package(ANSITerminal), quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -package ANSITerminal -I Compiling -I Typing -I Parsing -I Main -I Utils -o Compiling/environement.cmo Compiling/environement.ml
+ ocamlfind ocamlc -c -w a -package ANSITerminal -I Compiling -I Typing -I Parsing -I Main -I Utils -o Compiling/environement.cmo Compiling/environement.ml
File "Compiling/environement.ml", line 62, characters 58-60:
Error: This variant expression is expected to have type unit
       The constructor :: does not belong to type unit
Command exited with code 2.
# Compilation unsuccessful.
