### Starting build.
# Target: Main/Main.ml.depends, tags: { explain, extension:ml, file:Main/Main.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Main/Main.ml > Main/Main.ml.depends # cached
# Target: Main/Compile.ml.depends, tags: { explain, extension:ml, file:Main/Compile.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Main/Compile.ml > Main/Compile.ml.depends # cached
# Target: Parsing/AST.ml.depends, tags: { explain, extension:ml, file:Parsing/AST.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Parsing/AST.ml > Parsing/AST.ml.depends # cached
# Target: Utils/ListII.mli.depends, tags: { explain, extension:mli, file:Utils/ListII.mli, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Utils/ListII.mli > Utils/ListII.mli.depends # cached
# Target: Utils/ListII.cmi, tags: { byte, compile, explain, extension:mli, file:Utils/ListII.mli, interf, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Utils -I Typing -I Parsing -I Compiling -I Main -o Utils/ListII.cmi Utils/ListII.mli # cached
# Target: Utils/Location.mli.depends, tags: { explain, extension:mli, file:Utils/Location.mli, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Utils/Location.mli > Utils/Location.mli.depends # cached
# Target: Utils/Location.cmi, tags: { byte, compile, explain, extension:mli, file:Utils/Location.mli, interf, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Utils -I Typing -I Parsing -I Compiling -I Main -o Utils/Location.cmi Utils/Location.mli # cached
# Target: Typing/Type.mli.depends, tags: { explain, extension:mli, file:Typing/Type.mli, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Typing/Type.mli > Typing/Type.mli.depends # cached
# Target: Typing/Type.cmi, tags: { byte, compile, explain, extension:mli, file:Typing/Type.mli, interf, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Typing -I Parsing -I Compiling -I Main -I Utils -o Typing/Type.cmi Typing/Type.mli # cached
# Target: Parsing/AST.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Parsing/AST.cmo, file:Parsing/AST.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Parsing -I Typing -I Compiling -I Main -I Utils -o Parsing/AST.cmo Parsing/AST.ml # cached
# Target: Compiling/environement.ml.depends, tags: { explain, extension:ml, file:Compiling/environement.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Compiling/environement.ml > Compiling/environement.ml.depends # cached
# Target: Compiling/exceptions.ml.depends, tags: { explain, extension:ml, file:Compiling/exceptions.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Compiling/exceptions.ml > Compiling/exceptions.ml.depends # cached
# Target: Compiling/exceptions.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Compiling/exceptions.cmo, file:Compiling/exceptions.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Compiling -I Typing -I Parsing -I Main -I Utils -o Compiling/exceptions.cmo Compiling/exceptions.ml # cached
# Target: Compiling/environement.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Compiling/environement.cmo, file:Compiling/environement.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Compiling -I Typing -I Parsing -I Main -I Utils -o Compiling/environement.cmo Compiling/environement.ml # cached
# Target: Compiling/execute.ml.depends, tags: { explain, extension:ml, file:Compiling/execute.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Compiling/execute.ml > Compiling/execute.ml.depends # cached
# Target: Compiling/execute.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Compiling/execute.cmo, file:Compiling/execute.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Compiling -I Typing -I Parsing -I Main -I Utils -o Compiling/execute.cmo Compiling/execute.ml # cached
# Target: Parsing/Lexer.mll, tags: { explain, extension:mll, file:Parsing/Lexer.mll, lexer, ocaml, ocamllex, quiet, traverse, use_menhir, warn_a }
/home/hazem/.opam/4.02.3/bin/ocamllex.opt -q Parsing/Lexer.mll # cached
# Target: Parsing/Lexer.ml.depends, tags: { explain, extension:ml, file:Parsing/Lexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Parsing/Lexer.ml > Parsing/Lexer.ml.depends # cached
# Target: Parsing/Error.mli.depends, tags: { explain, extension:mli, file:Parsing/Error.mli, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Parsing/Error.mli > Parsing/Error.mli.depends # cached
# Target: Parsing/Error.cmi, tags: { byte, compile, explain, extension:mli, file:Parsing/Error.mli, interf, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Parsing -I Typing -I Compiling -I Main -I Utils -o Parsing/Error.cmi Parsing/Error.mli # cached
# Target: echo 'open Parser

let kw_list = [
"abstract", ABSTRACT ;
"assert", ASSERT ;
"boolean", BOOLEAN ;
"break", BREAK ;
"byte", BYTE ;
"case", CASE ;
"catch", CATCH ;
"char", CHAR ;
"class", CLASS ;
"default", DEFAULT ;
"do", DO ;
"double", DOUBLE ;
"else", ELSE ;
"extends", EXTENDS ;
"false", FALSE ;
"final", FINAL ;
"finally", FINALLY ;
"float", FLOAT ;
"for", FOR ;
"if", IF ;
"implements", IMPLEMENTS ;
"import", IMPORT ;
"instanceof", INSTANCEOF ;
"int", INT ;
"interface", INTERFACE ;
"long", LONG ;
"native", NATIVE ;
"new", NEW ;
"null", NULL ;
"package", PACKAGE ;
"private", PRIVATE ;
"protected", PROTECTED ;
"public", PUBLIC ;
"return", RETURN ;
"short", SHORT ;
"static", STATIC ;
"strictfp", STRICTFP ;
"super", SUPER ;
"switch", SWITCH ;
"synchronized", SYNCHRONIZED ;
"this", THIS ;
"throw", THROW ;
"throws", THROWS ;
"transient", TRANSIENT ;
"true", TRUE ;
"try", TRY ;
"void", VOID ;
"volatile", VOLATILE ;
"while", WHILE ;
]
' > KeywordLexer.ml, tags: {  }
echo 'open Parser

let kw_list = [
"abstract", ABSTRACT ;
"assert", ASSERT ;
"boolean", BOOLEAN ;
"break", BREAK ;
"byte", BYTE ;
"case", CASE ;
"catch", CATCH ;
"char", CHAR ;
"class", CLASS ;
"default", DEFAULT ;
"do", DO ;
"double", DOUBLE ;
"else", ELSE ;
"extends", EXTENDS ;
"false", FALSE ;
"final", FINAL ;
"finally", FINALLY ;
"float", FLOAT ;
"for", FOR ;
"if", IF ;
"implements", IMPLEMENTS ;
"import", IMPORT ;
"instanceof", INSTANCEOF ;
"int", INT ;
"interface", INTERFACE ;
"long", LONG ;
"native", NATIVE ;
"new", NEW ;
"null", NULL ;
"package", PACKAGE ;
"private", PRIVATE ;
"protected", PROTECTED ;
"public", PUBLIC ;
"return", RETURN ;
"short", SHORT ;
"static", STATIC ;
"strictfp", STRICTFP ;
"super", SUPER ;
"switch", SWITCH ;
"synchronized", SYNCHRONIZED ;
"this", THIS ;
"throw", THROW ;
"throws", THROWS ;
"transient", TRANSIENT ;
"true", TRUE ;
"try", TRY ;
"void", VOID ;
"volatile", VOLATILE ;
"while", WHILE ;
]
' > KeywordLexer.ml # cached
# Target: echo '%token ABSTRACT
%token ASSERT
%token BOOLEAN
%token BREAK
%token BYTE
%token CASE
%token CATCH
%token CHAR
%token CLASS
%token DEFAULT
%token DO
%token DOUBLE
%token ELSE
%token EXTENDS
%token FALSE
%token FINAL
%token FINALLY
%token FLOAT
%token FOR
%token IF
%token IMPLEMENTS
%token IMPORT
%token INSTANCEOF
%token INT
%token INTERFACE
%token LONG
%token NATIVE
%token NEW
%token NULL
%token PACKAGE
%token PRIVATE
%token PROTECTED
%token PUBLIC
%token RETURN
%token SHORT
%token STATIC
%token STRICTFP
%token SUPER
%token SWITCH
%token SYNCHRONIZED
%token THIS
%token THROW
%token THROWS
%token TRANSIENT
%token TRUE
%token TRY
%token VOID
%token VOLATILE
%token WHILE

%%
' > WordParser.mly, tags: {  }
echo '%token ABSTRACT
%token ASSERT
%token BOOLEAN
%token BREAK
%token BYTE
%token CASE
%token CATCH
%token CHAR
%token CLASS
%token DEFAULT
%token DO
%token DOUBLE
%token ELSE
%token EXTENDS
%token FALSE
%token FINAL
%token FINALLY
%token FLOAT
%token FOR
%token IF
%token IMPLEMENTS
%token IMPORT
%token INSTANCEOF
%token INT
%token INTERFACE
%token LONG
%token NATIVE
%token NEW
%token NULL
%token PACKAGE
%token PRIVATE
%token PROTECTED
%token PUBLIC
%token RETURN
%token SHORT
%token STATIC
%token STRICTFP
%token SUPER
%token SWITCH
%token SYNCHRONIZED
%token THIS
%token THROW
%token THROWS
%token TRANSIENT
%token TRUE
%token TRY
%token VOID
%token VOLATILE
%token WHILE

%%
' > WordParser.mly # cached
# Target: KeywordLexer.ml.depends, tags: { explain, extension:ml, file:KeywordLexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules KeywordLexer.ml > KeywordLexer.ml.depends # cached
# Target: Parsing/Parser.mlypack.depends, tags: { explain, extension:mly, extension:mlypack, file:Parsing/InnerParser.mly, file:Parsing/OuterParser.mly, file:Parsing/Parser.mlypack, file:WordParser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' --base Parsing/Parser WordParser.mly Parsing/InnerParser.mly Parsing/OuterParser.mly > Parsing/Parser.mlypack.depends # cached
# Target: Parsing/Parser, tags: { byte, compile, explain, extension:mly, extension:mlypack, file:Parsing/InnerParser.mly, file:Parsing/OuterParser.mly, file:Parsing/Parser.mlypack, file:WordParser.mly, infer, menhir, ocaml, parser, quiet, traverse, use_menhir, warn_a }
menhir --ocamlc 'ocamlfind ocamlc -w a -I Parsing -I Typing -I Compiling -I Main -I Utils' --explain --infer --base Parsing/Parser WordParser.mly Parsing/InnerParser.mly Parsing/OuterParser.mly # cached
# Target: Parsing/Parser.mli.depends, tags: { explain, extension:mli, file:Parsing/Parser.mli, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Parsing/Parser.mli > Parsing/Parser.mli.depends # cached
# Target: Parsing/Parser.cmi, tags: { byte, compile, explain, extension:mli, file:Parsing/Parser.mli, interf, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Parsing -I Typing -I Compiling -I Main -I Utils -o Parsing/Parser.cmi Parsing/Parser.mli # cached
# Target: KeywordLexer.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:KeywordLexer.cmo, file:KeywordLexer.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Typing -I Parsing -I Compiling -I Main -I Utils -o KeywordLexer.cmo KeywordLexer.ml # cached
# Target: Parsing/Lexer.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Parsing/Lexer.cmo, file:Parsing/Lexer.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Parsing -I Typing -I Compiling -I Main -I Utils -o Parsing/Lexer.cmo Parsing/Lexer.ml # cached
# Target: Main/Compile.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Main/Compile.cmo, file:Main/Compile.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Main -I Typing -I Parsing -I Compiling -I Utils -o Main/Compile.cmo Main/Compile.ml # cached
# Target: Main/Main.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Main/Main.cmo, file:Main/Main.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Main -I Typing -I Parsing -I Compiling -I Utils -o Main/Main.cmo Main/Main.ml # cached
# Target: Utils/Location.ml.depends, tags: { explain, extension:ml, file:Utils/Location.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Utils/Location.ml > Utils/Location.ml.depends # cached
# Target: Utils/Location.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Utils/Location.cmo, file:Utils/Location.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Utils -I Typing -I Parsing -I Compiling -I Main -o Utils/Location.cmo Utils/Location.ml # cached
# Target: Parsing/Parser.ml.depends, tags: { explain, extension:ml, file:Parsing/Parser.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Parsing/Parser.ml > Parsing/Parser.ml.depends # cached
# Target: Parsing/Parser.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Parsing/Parser.cmo, file:Parsing/Parser.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Parsing -I Typing -I Compiling -I Main -I Utils -o Parsing/Parser.cmo Parsing/Parser.ml # cached
# Target: Utils/ListII.ml.depends, tags: { explain, extension:ml, file:Utils/ListII.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Utils/ListII.ml > Utils/ListII.ml.depends # cached
# Target: Utils/ListII.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Utils/ListII.cmo, file:Utils/ListII.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Utils -I Typing -I Parsing -I Compiling -I Main -o Utils/ListII.cmo Utils/ListII.ml # cached
# Target: Typing/Type.ml.depends, tags: { explain, extension:ml, file:Typing/Type.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Typing/Type.ml > Typing/Type.ml.depends # cached
# Target: Typing/Type.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Typing/Type.cmo, file:Typing/Type.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Typing -I Parsing -I Compiling -I Main -I Utils -o Typing/Type.cmo Typing/Type.ml # cached
# Target: Parsing/Error.ml.depends, tags: { explain, extension:ml, file:Parsing/Error.ml, ocaml, ocamldep, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamldep -modules Parsing/Error.ml > Parsing/Error.ml.depends # cached
# Target: Parsing/Error.cmo, tags: { byte, compile, explain, extension:cmo, extension:ml, file:Parsing/Error.cmo, file:Parsing/Error.ml, implem, ocaml, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -c -w a -I Parsing -I Typing -I Compiling -I Main -I Utils -o Parsing/Error.cmo Parsing/Error.ml # cached
# Target: Main/Main.byte, tags: { byte, dont_link_with, explain, extension:byte, file:Main/Main.byte, link, ocaml, program, quiet, traverse, use_menhir, warn_a }
ocamlfind ocamlc -linkpkg Compiling/exceptions.cmo Utils/ListII.cmo Typing/Type.cmo Utils/Location.cmo Parsing/AST.cmo Compiling/environement.cmo Compiling/execute.cmo Parsing/Parser.cmo KeywordLexer.cmo Parsing/Error.cmo Parsing/Lexer.cmo Main/Compile.cmo Main/Main.cmo -o Main/Main.byte # cached
# Compilation successful.
